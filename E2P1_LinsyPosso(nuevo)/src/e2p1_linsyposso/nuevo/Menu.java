/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package e2p1_linsyposso.nuevo;
import java.util.Scanner;
import java.util.ArrayList;
/**
 *
 * @author CARMEN POSSO
 */
public class Menu extends javax.swing.JFrame {
static Scanner Leer = new Scanner (System.in);
ArrayList<Numero> numeros = new ArrayList<>();
    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("jLabel1");

        jButton1.setText("Numeros");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Operaciones");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(Salir)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jButton2)))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(jButton1)
                .addGap(29, 29, 29)
                .addComponent(jButton2)
                .addGap(47, 47, 47)
                .addComponent(Salir)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       boolean submenu = true;
        while (submenu) {
            System.out.println("1. Agregar numero");
            System.out.println("2. Eliminar numero");
            System.out.println("3. Menu Principal");
            System.out.println("Opción ingresada: ");
            int opcion = Leer.nextInt();

            switch (opcion) {
                case 1:
                    agregarNumero(numeros, Leer);
                    break;
                case 2:
                   EliminarNumero(numeros, Leer);
                    break;
                case 3: 
                submenu = false;
                    new Menu().setVisible(true);
    }                                            
    }
    
    
                        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      System.out.println("Lista de números disponibles:");
        imprimirNumeros(numeros);

    System.out.println("Seleccione la operación a realizar:");
    System.out.println("1. Suma");
    System.out.println("2. Resta");
    System.out.println("3. Multiplicación");
    System.out.print("Ingrese una opción: ");
    int opcionOperacion = Leer.nextInt();

    if (opcionOperacion < 1 || opcionOperacion > 3) {
        System.out.println("Opción inválida. Operación cancelada.");
        System.out.println();
        return;
    }

    System.out.print("Ingrese el índice del primer número: ");
   int indiceNumero1 = Leer.nextInt();
    Leer.nextLine(); // Limpiar el búfer de entrada

    if (indiceNumero1 < 0 || indiceNumero1 >= numeros.size()) {
        System.out.println("Índice inválido. Operación cancelada.");
        System.out.println();
        return;
    }

    System.out.print("Ingrese el índice del segundo número: ");
    int indiceNumero2 = Leer.nextInt();
    Leer.nextLine(); // Limpiar el búfer de entrada

    if (indiceNumero2 < 0 || indiceNumero2 >= numeros.size()) {
        System.out.println("Índice inválido. Operación cancelada.");
        System.out.println();
        return;
    }

    Numero numero1 = numeros.get(indiceNumero1);
    Numero numero2 = numeros.get(indiceNumero2);

    String resultado = "";
    switch (opcionOperacion) {
        case 1:
            resultado = sumarNumeros(numero1, numero2);
            break;
        case 2:
            resultado = restarNumeros(numero1, numero2);
            break;
        case 3:
            resultado = multiplicarNumeros(numero1, numero2);
            break;
    }

    int baseMaxima = Math.max(numero1.getBase(), numero2.getBase());
    String resultadoEnBaseMaxima = Integer.toString(Integer.parseInt(resultado), baseMaxima);

    System.out.println("Resultado en base " + baseMaxima + ": " + resultadoEnBaseMaxima);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
         System.exit(0); 
    }//GEN-LAST:event_SalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {      
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }
    public static void agregarNumero(ArrayList<Numero> numeros, Scanner Leer) {
        System.out.print("Ingrese un número decimal: ");
        int numeroDecimal = Leer.nextInt();

        System.out.print("Ingrese la base para convertir el número decimal: ");
        int base = Leer.nextInt();

        if (base < 2 || base > 35) {
            System.out.println("La base debe estar entre 2 y 35");
            return;
        }
        if (numeroDecimal < 0) {
            System.out.println("El valor decimal debe ser un número positivo");
            return;
        }

        Numero numero = new Numero(base, numeroDecimal);
        numeros.add(numero);
        System.out.println("Número agregado al ArrayList");
        System.out.println(numeroDecimal + " en base " + base + ": " + numero.getNumero());
    }
    

    
     public static void EliminarNumero(ArrayList<Numero> numeros, Scanner Leer) {
       if (numeros.isEmpty()) {
            System.out.println("El ArrayList está vacío");
            return;
        }

        System.out.println("Lista de números:");
        for (int i = 0; i < numeros.size(); i++) {
            System.out.println(i + ". " + numeros.get(i).getNumero());
        }

        System.out.print("Ingrese el índice del número que desea eliminar: ");
        int indice = Leer.nextInt();

        if (indice < 0 || indice >= numeros.size()) {
            System.out.println("Índice inválido");
            return;
        }

        numeros.remove(indice);
        System.out.println("Número eliminado del ArrayList");
    }
     private static void imprimirNumeros(ArrayList<Numero> numeros) {
    System.out.println("Lista de números disponibles:");
    for (int i = 0; i < numeros.size(); i++) {
        System.out.println(i + ". " + numeros.get(i).getNumero());
    }
     }
    

   public static String sumarNumeros(Numero numero1, Numero numero2) {
    int resultadoDecimal = Integer.parseInt(numero1.getNumero(), numero1.getBase()) + Integer.parseInt(numero2.getNumero(), numero2.getBase());
    return Integer.toString(resultadoDecimal, Math.max(numero1.getBase(), numero2.getBase()));
}
    public static String restarNumeros(Numero numero1, Numero numero2) {
    int resultadoDecimal = Integer.parseInt(numero1.getNumero(), numero1.getBase()) - Integer.parseInt(numero2.getNumero(), numero2.getBase());
    return Integer.toString(resultadoDecimal, Math.max(numero1.getBase(), numero2.getBase()));
}
    public static String multiplicarNumeros(Numero numero1, Numero numero2) {
    int resultadoDecimal = Integer.parseInt(numero1.getNumero(), numero1.getBase()) * Integer.parseInt(numero2.getNumero(), numero2.getBase());
    return Integer.toString(resultadoDecimal, Math.max(numero1.getBase(), numero2.getBase()));
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Salir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
